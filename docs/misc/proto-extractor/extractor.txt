using System;
using System.Collections.Generic;
using System.Text;

namespace ConsoleApplication3
{
    class Program
    {
        static void CreateDirectory( System.IO.DirectoryInfo dirInfo )
        {
            if( dirInfo.Parent != null )
                CreateDirectory( dirInfo.Parent );

            if( !dirInfo.Exists )
                dirInfo.Create();
        }

        public class Writer
        {
            System.IO.TextWriter stream;

            public static void WriteFile( google.protobuf.FileDescriptorProto file, String outPath, List<String> files )
            {
                var path = System.IO.Path.Combine( outPath, file.name );
                CreateDirectory( new System.IO.DirectoryInfo( System.IO.Path.GetDirectoryName( path ) ) );
                    
                using( var stream = new System.IO.StreamWriter( System.IO.File.Create( path ) ) )
                {
                    var writer = new Writer( stream );
                    writer.Write( file );

                    var val = stream.ToString();
                }

                files.Add( file.name );
            }

            public Writer( System.IO.TextWriter stream )
            {
                this.stream = stream;
            }

            void Write( google.protobuf.FileDescriptorProto file )
            {
                if( file.dependency != null && file.dependency.Count > 0 )
                {
                    foreach( var dep in file.dependency )
                    {
                        stream.Write( "import \"" + dep + "\";\r\n" );
                    }

                    stream.Write( "\r\n" );
                }

                if( !String.IsNullOrEmpty( file.package ) )
                {
                    stream.Write( "package " + file.package + ";\r\n\r\n" );
                }

                foreach( var enumeration in file.enum_type )
                {
                    Write( enumeration );
                }

                foreach( var type in file.message_type )
                {
                    Write( type );
                }
            }

            void Write( google.protobuf.FieldDescriptorProto field )
            {
                switch( field.label )
                {
                    case google.protobuf.FieldDescriptorProto.Label.LABEL_OPTIONAL: stream.Write( "optional " ); break;
                    case google.protobuf.FieldDescriptorProto.Label.LABEL_REQUIRED: stream.Write( "required " ); break;
                    case google.protobuf.FieldDescriptorProto.Label.LABEL_REPEATED: stream.Write( "repeated " ); break;
                    default: throw new Exception( "Unknown field label" );
                }

                String type = field.type_name;
                if( String.IsNullOrEmpty( type ) )
                {
                    switch( field.type )
                    {
                        case google.protobuf.FieldDescriptorProto.Type.TYPE_BOOL:     type = "bool";     break;
                        case google.protobuf.FieldDescriptorProto.Type.TYPE_BYTES:    type = "bytes";    break;
                        case google.protobuf.FieldDescriptorProto.Type.TYPE_DOUBLE:   type = "double";   break;
                        case google.protobuf.FieldDescriptorProto.Type.TYPE_FIXED32:  type = "fixed32";  break;
                        case google.protobuf.FieldDescriptorProto.Type.TYPE_FIXED64:  type = "fixed64";  break;
                        case google.protobuf.FieldDescriptorProto.Type.TYPE_FLOAT:    type = "float";    break;
                        case google.protobuf.FieldDescriptorProto.Type.TYPE_INT32:    type = "int32";    break;
                        case google.protobuf.FieldDescriptorProto.Type.TYPE_INT64:    type = "int64";    break;
                        case google.protobuf.FieldDescriptorProto.Type.TYPE_SFIXED32: type = "sfixed32"; break;
                        case google.protobuf.FieldDescriptorProto.Type.TYPE_SFIXED64: type = "sfixed64"; break;
                        case google.protobuf.FieldDescriptorProto.Type.TYPE_SINT32:   type = "sint32";   break;
                        case google.protobuf.FieldDescriptorProto.Type.TYPE_SINT64:   type = "sint64";   break;
                        case google.protobuf.FieldDescriptorProto.Type.TYPE_STRING:   type = "string";   break;
                        case google.protobuf.FieldDescriptorProto.Type.TYPE_UINT32:   type = "uint32";   break;
                        case google.protobuf.FieldDescriptorProto.Type.TYPE_UINT64:   type = "uint64";   break;
                        default: throw new Exception( "Unknown field type" );
                    }
                }

                stream.Write( type + " " + field.name +  " = " + field.number.ToString() + ";\r\n" );
            }

            void Write( google.protobuf.EnumValueDescriptorProto val )
            {
                stream.Write( val.name + " = " + val.number.ToString() + ";\r\n" );
            }

            void Write( google.protobuf.EnumDescriptorProto enumeration )
            {
                stream.Write( "enum " + enumeration.name + "\r\n{\r\n" );

                if( enumeration.value != null )
                {
                    foreach( var val in enumeration.value )
                    {
                        Write( val );
                    }
                }

                stream.Write( "}\r\n\r\n" );
            }

            void Write( google.protobuf.DescriptorProto message )
            {
                stream.Write( "message " + message.name + "\r\n{\r\n" );

                if( message.enum_type != null )
                {
                    foreach( var enumeration in message.enum_type )
                    {
                        Write( enumeration );
                    }
                }

                foreach( var type in message.nested_type )
                {
                    Write( type );
                }

                foreach( var field in message.field )
                {
                    Write( field );
                }

                stream.Write( "}\r\n\r\n" );
            }
        }

        struct Proto
        {
            public UInt32 Location;
            public Int32 Size;

            public Proto( UInt32 location, Int32 size )
            {
                Location = location;
                Size = size;
            }
        }

        static void Main( string[] args )
        {
            var files = new List<String>();
            foreach( var path in System.IO.Directory.GetFiles( args[0], "*.proto", System.IO.SearchOption.AllDirectories ) )
            {
                using( var stream = new System.IO.BinaryReader( System.IO.File.OpenRead( path ) ) )
                {
                    var file = ProtoBuf.Serializer.Deserialize<google.protobuf.FileDescriptorProto>( stream.BaseStream );
                    Writer.WriteFile( file, args[1], files );
                }
            }

            using( var stream = new System.IO.StreamWriter( System.IO.File.Create( System.IO.Path.Combine( args[1], "compile.bat" ) ) ) )
            {
                foreach( var file in files )
                {
                    stream.Write( "protoc " + file + " --cpp_out=cpp/\r\n" );
                }

                stream.Write( "\r\npause" );
            }

            var protos = new Proto[]
            {
                new Proto( 0x112FB70, 0x5EA ),
                new Proto( 0x1130298, 0x5B ),
                new Proto( 0x1132498, 0x9B2 ),
                new Proto( 0x1133028, 0x12A ),
                new Proto( 0x11333F0, 0x0EB ),
                new Proto( 0x1133608, 0x39F ),
                new Proto( 0x1133C58, 0x31D ),
                new Proto( 0x11340A8, 0x0CE ),
                new Proto( 0x118F938, 0x107 ),
                new Proto( 0x11E98C8, 0x2E2 ),
                new Proto( 0x11EA580, 0x0E36 ),
                new Proto( 0x11EB860, 0x435 ),
                new Proto( 0x11EC358, 0x925 ),
                new Proto( 0x11ED6B8, 0x198 ),
                new Proto( 0x11F66A8, 0x11E ),
                new Proto( 0x11F6920, 0x0E7 ),
                new Proto( 0x11F6BA0, 0x219 ),
                new Proto( 0x11F70A0, 0x3C6 ),
                new Proto( 0x1206F00, 0x0DF ),
                new Proto( 0x1208FA8, 0x3E1 ),
                new Proto( 0x12094A0, 0x90 ),
                new Proto( 0x1209B20, 0x9A ),
                new Proto( 0x1209D08, 0x70 ),
            };

            using( var stream = new System.IO.BinaryReader( System.IO.File.OpenRead( args[2] ) ) )
            {
                var idx = 0;
                foreach( var proto in protos )
                {
                    stream.BaseStream.Position = proto.Location - 8395264;
                    var data = stream.ReadBytes( proto.Size );

                    var path = System.IO.Path.Combine( args[3], idx.ToString() + ".proto" );
                    CreateDirectory( new System.IO.DirectoryInfo( System.IO.Path.GetDirectoryName( path ) ) );

                    using( var output = new System.IO.BinaryWriter( System.IO.File.OpenWrite( path ) ) )
                    {
                        output.Write( data );
                    }

                    ++idx;
                }
            }
        }
    }
}